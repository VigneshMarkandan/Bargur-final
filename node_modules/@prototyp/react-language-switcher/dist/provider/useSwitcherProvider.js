"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useSwitcherContext_1 = require("../context/useSwitcherContext");
function useSwitcherProvider(config) {
    var baseConfig = useSwitcherContext_1.useSwitcherContext();
    /**
     * @description Combine default config with overrides passed from parent component
     */
    var providerConfig = __assign(__assign({}, baseConfig), config);
    /**
     * @description Internal state and logic for adding middleware
     */
    // const [middleware, addMiddleware] = useState<SwitcherMiddleware[]>([]);
    var _a = react_1.useState(providerConfig), providerState = _a[0], updateProviderState = _a[1];
    var registerMiddleware = react_1.useCallback(function (name, props, component) {
        updateProviderState(function (s) { return (__assign({ middleware: __spreadArrays(s.middleware, [{ name: name, component: component }]) }, props)); });
    }, []);
    var updateValue = function (selector, val) {
        updateProviderState(function (s) {
            var _a;
            return (__assign(__assign({}, s), (_a = {}, _a[selector] = val, _a)));
        });
    };
    return { providerState: providerState, registerMiddleware: registerMiddleware, updateValue: updateValue };
}
exports.useSwitcherProvider = useSwitcherProvider;
